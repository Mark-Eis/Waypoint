[{"path":"https://mark-eis.github.io/Waypoint/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Waypoint authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mark-eis.github.io/Waypoint/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Eisler. Maintainer.","code":""},{"path":"https://mark-eis.github.io/Waypoint/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eisler M (2025). Waypoint: Convert, Validate, Format Print Geographic Coordinates Waypoints. R package version 1.0.0.00024, https://mark-eis.github.io/Waypoint/.","code":"@Manual{,   title = {Waypoint: Convert, Validate, Format and Print Geographic Coordinates and Waypoints},   author = {Mark Eisler},   year = {2025},   note = {R package version 1.0.0.00024},   url = {https://mark-eis.github.io/Waypoint/}, }"},{"path":[]},{"path":"https://mark-eis.github.io/Waypoint/index.html","id":"conversion-validation-formatting-and-printing-of-geographic-coordinates","dir":"","previous_headings":"","what":"Conversion, Validation, Formatting and Printing of Geographic Coordinates","title":"Convert, Validate, Format and Print Geographic Coordinates and Waypoints","text":"Waypoint R package enables conversion, validation, formatting elegant printing geographic positional coordinates waypoints (paired latitude longitude values). Coordinates waypoints may converted easily rapidly () decimal degree, (ii) degrees minutes, (iii) degrees, minutes seconds formats.","code":""},{"path":"https://mark-eis.github.io/Waypoint/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Convert, Validate, Format and Print Geographic Coordinates and Waypoints","text":"can install development version Waypoint GitHub : Author: Mark C. Eisler eMail: Mark.Eisler@bristol.ac.uk ORCID = 0000-0001-6843-3345","code":"# install.packages(\"devtools\") devtools::install_github(\"Mark-Eis/Waypoint\")"},{"path":"https://mark-eis.github.io/Waypoint/index.html","id":"waypoint-package-overview-","dir":"","previous_headings":"Installation","what":"Waypoint Package Overview: –","title":"Convert, Validate, Format and Print Geographic Coordinates and Waypoints","text":"Creates “coords” objects format as_coords(). Creates “waypoints” objects format as_waypoints(). Converts “coords” “waypoints” objects decimal degrees, degrees minutes, degrees, minutes seconds formats convert(). Assigns latitude longitude attributes individual coordinate values within “coords” objects latlon<-(). Ensures values within “coords” “waypoints” objects valid geographic locations validate() identifies individual invalid values review(). Provides format() print() S3 methods neat formatting printing objects classes “coords” “waypoints”.","code":""},{"path":"https://mark-eis.github.io/Waypoint/index.html","id":"methodology","dir":"","previous_headings":"Installation > Waypoint Package Overview: –","what":"Methodology","title":"Convert, Validate, Format and Print Geographic Coordinates and Waypoints","text":"Waypoint uses high performance C++ code seamlessly integrated R using Rcpp enable rapid conversion formatting large coordinate waypoint datasets.","code":""},{"path":"https://mark-eis.github.io/Waypoint/index.html","id":"disclaimer","dir":"","previous_headings":"Installation > Waypoint Package Overview: –","what":"Disclaimer","title":"Convert, Validate, Format and Print Geographic Coordinates and Waypoints","text":"every effort made ensure package functions expected, author accepts responsibility consequences errors even map shows city middle ocean, boat runs aground, aeroplane crashes mountain.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/Coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographic or GPS Coordinate Class — Coords","title":"Geographic or GPS Coordinate Class — Coords","text":"as_coords() creates object class \"coords\", robust representation series geographic GPS coordinate values. convert() converts format existing objects class \"coords\" () decimal degrees, (ii) degrees minutes, (iii) degrees, minutes seconds.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/Coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographic or GPS Coordinate Class — Coords","text":"","code":"as_coords(object, ...)  convert(x, ...)  # S3 method for class 'coords' print(x, ...)  # Default S3 method as_coords(object, ..., fmt = 1L)  # S3 method for class 'coords' convert(x, fmt, ...)  # S3 method for class 'coords' format(x, ..., usenames = TRUE)  # S3 method for class 'waypoints' as_coords(object, latlon, ...)"},{"path":"https://mark-eis.github.io/Waypoint/reference/Coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geographic or GPS Coordinate Class — Coords","text":"object numeric vector coordinate values, optionally named, object class \"waypoints\". ... arguments passed methods. x object class \"coords\" created function as_coords(). fmt integer, 1L, 2L 3L, indicating current desired coordinate format. usenames logical, whether include names formatted output. latlon logical, indicating whether as_coords() S3 method class \"waypoints\" extracts latitude component argument object (TRUE), longitude (FALSE).","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/Coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geographic or GPS Coordinate Class — Coords","text":"object class \"coords\", comprising original numeric vector argument nv values possibly converted appropriate additional attributes: – \"fmt\" coordinate format. \"valid\" logical vector indicating whether individual coordinate values   valid geographic locations.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/Coords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geographic or GPS Coordinate Class — Coords","text":"Individual values provided numeric vector argument nv decimal point number whole degrees case decimal degrees, number whole minutes case degrees minutes, number whole seconds case degrees, minutes seconds. fmt argument 1L represent decimal degrees, 2L degrees minutes, 3L degrees, minutes seconds used provide format values numeric vector argument nv converted \"coords\" object desired format \"coords\" object converted new format. Note conversion \"coords\" object, original numeric vector argument nv modified values described previous paragraph, may inspected using standard R code, see examples. values newly created \"coords\" object checked ensure valid geographic locations described validate(). Likewise, check made ensure existing \"coords\" object converted new format already validated; , re-validated.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/Waypoint/reference/Coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geographic or GPS Coordinate Class — Coords","text":"","code":"## Numeric vector representing degrees and minutes dm <- c(5130.4659, 4932.7726, 4806.4339, 3853.3696, 0.0000, -3706.7044, -5306.2869, -2514.4093,         -007.6754, 1823.9137, -12246.7203, -7702.1145, 0.0000, -1217.3178, 7331.0370, -5731.1536)  ## Create a \"coords\" object of degrees and minutes (fmt = 2) as_coords(dm, fmt = 2) #>  51°30.4659′ (N/E) #>  49°32.7726′ (N/E) #>  48°06.4339′ (N/E) #>  38°53.3696′ (N/E) #>   0°00.0000′ (N/E) #>  37°06.7044′ (S/W) #>  53°06.2869′ (S/W) #>  25°14.4093′ (S/W) #>   0°07.6754′ (S/W) #>  18°23.9137′ (N/E) #> 122°46.7203′ (S/W) #>  77°02.1145′ (S/W) #>   0°00.0000′ (N/E) #>  12°17.3178′ (S/W) #>  73°31.0370′ (N/E) #>  57°31.1536′ (S/W)  ## Name the \"coords\" object names(dm) <- rep(c(\"Nelson's Column\", \"Ostravice\", \"Tally Ho\", \"Washington Monument\", \"Null Island\",                    \"Tristan da Cunha\", \"Mawson Peak\", \"Silvio Pettirossi International Airport\"), 2) dm #> Nelson's Column                           51°30.4659′ (N/E) #> Ostravice                                 49°32.7726′ (N/E) #> Tally Ho                                  48°06.4339′ (N/E) #> Washington Monument                       38°53.3696′ (N/E) #> Null Island                                0°00.0000′ (N/E) #> Tristan da Cunha                          37°06.7044′ (S/W) #> Mawson Peak                               53°06.2869′ (S/W) #> Silvio Pettirossi International Airport   25°14.4093′ (S/W) #> Nelson's Column                            0°07.6754′ (S/W) #> Ostravice                                 18°23.9137′ (N/E) #> Tally Ho                                 122°46.7203′ (S/W) #> Washington Monument                       77°02.1145′ (S/W) #> Null Island                                0°00.0000′ (N/E) #> Tristan da Cunha                          12°17.3178′ (S/W) #> Mawson Peak                               73°31.0370′ (N/E) #> Silvio Pettirossi International Airport   57°31.1536′ (S/W)  ## Convert to degrees, minutes and seconds (fmt = 3) convert(dm, 3) #> Nelson's Column                           51°30′27.95″ (N/E) #> Ostravice                                 49°32′46.36″ (N/E) #> Tally Ho                                  48°06′26.03″ (N/E) #> Washington Monument                       38°53′22.18″ (N/E) #> Null Island                                0°00′00.00″ (N/E) #> Tristan da Cunha                          37°06′42.26″ (S/W) #> Mawson Peak                               53°06′17.21″ (S/W) #> Silvio Pettirossi International Airport   25°14′24.56″ (S/W) #> Nelson's Column                            0°07′40.52″ (S/W) #> Ostravice                                 18°23′54.82″ (N/E) #> Tally Ho                                 122°46′43.22″ (S/W) #> Washington Monument                       77°02′06.87″ (S/W) #> Null Island                                0°00′00.00″ (N/E) #> Tristan da Cunha                          12°17′19.07″ (S/W) #> Mawson Peak                               73°31′02.22″ (N/E) #> Silvio Pettirossi International Airport   57°31′09.22″ (S/W)  ## Convert to decimal degrees (fmt = 1) convert(dm, 1) #> Nelson's Column                            51.507765° #> Ostravice                                  49.546210° #> Tally Ho                                   48.107232° #> Washington Monument                        38.889493° #> Null Island                                 0.000000° #> Tristan da Cunha                          -37.111740° #> Mawson Peak                               -53.104782° #> Silvio Pettirossi International Airport   -25.240155° #> Nelson's Column                            -0.127923° #> Ostravice                                  18.398562° #> Tally Ho                                 -122.778672° #> Washington Monument                       -77.035242° #> Null Island                                 0.000000° #> Tristan da Cunha                          -12.288630° #> Mawson Peak                                73.517283° #> Silvio Pettirossi International Airport   -57.519227°  ## Decimal degrees as an ordinary R numeric vector as.numeric(dm) #>  [1]   51.5077650   49.5462100   48.1072317   38.8894933    0.0000000 #>  [6]  -37.1117400  -53.1047817  -25.2401550   -0.1279233   18.3985617 #> [11] -122.7786717  -77.0352417    0.0000000  -12.2886300   73.5172833 #> [16]  -57.5192267  ## Convert to degrees and minutes, then format as a ## fixed-width character vector without names... convert(dm, 3) |> format(usenames = FALSE) #>  [1] \" 51°30′27.95″ (N/E)\" \" 49°32′46.36″ (N/E)\" \" 48°06′26.03″ (N/E)\" #>  [4] \" 38°53′22.18″ (N/E)\" \"  0°00′00.00″ (N/E)\" \" 37°06′42.26″ (S/W)\" #>  [7] \" 53°06′17.21″ (S/W)\" \" 25°14′24.56″ (S/W)\" \"  0°07′40.52″ (S/W)\" #> [10] \" 18°23′54.82″ (N/E)\" \"122°46′43.22″ (S/W)\" \" 77°02′06.87″ (S/W)\" #> [13] \"  0°00′00.00″ (N/E)\" \" 12°17′19.07″ (S/W)\" \" 73°31′02.22″ (N/E)\" #> [16] \" 57°31′09.22″ (S/W)\"  ## ...or with them format(dm) #>  [1] \"Nelson's Column                           51°30′27.95″ (N/E)\" #>  [2] \"Ostravice                                 49°32′46.36″ (N/E)\" #>  [3] \"Tally Ho                                  48°06′26.03″ (N/E)\" #>  [4] \"Washington Monument                       38°53′22.18″ (N/E)\" #>  [5] \"Null Island                                0°00′00.00″ (N/E)\" #>  [6] \"Tristan da Cunha                          37°06′42.26″ (S/W)\" #>  [7] \"Mawson Peak                               53°06′17.21″ (S/W)\" #>  [8] \"Silvio Pettirossi International Airport   25°14′24.56″ (S/W)\" #>  [9] \"Nelson's Column                            0°07′40.52″ (S/W)\" #> [10] \"Ostravice                                 18°23′54.82″ (N/E)\" #> [11] \"Tally Ho                                 122°46′43.22″ (S/W)\" #> [12] \"Washington Monument                       77°02′06.87″ (S/W)\" #> [13] \"Null Island                                0°00′00.00″ (N/E)\" #> [14] \"Tristan da Cunha                          12°17′19.07″ (S/W)\" #> [15] \"Mawson Peak                               73°31′02.22″ (N/E)\" #> [16] \"Silvio Pettirossi International Airport   57°31′09.22″ (S/W)\"  rm(dm)"},{"path":"https://mark-eis.github.io/Waypoint/reference/Waypoint-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert, Validate, Format and Print Geographic Coordinates and Waypoints — Waypoint-package","title":"Convert, Validate, Format and Print Geographic Coordinates and Waypoints — Waypoint-package","text":"Convert, validate, format elegantly print geographic positional coordinates waypoints (paired latitude longitude values) decimal degrees, degrees minutes, degrees, minutes seconds.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/Waypoint-package.html","id":"package-content","dir":"Reference","previous_headings":"","what":"Package Content","title":"Convert, Validate, Format and Print Geographic Coordinates and Waypoints — Waypoint-package","text":"Index:  package yet installed build time.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/Waypoint-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert, Validate, Format and Print Geographic Coordinates and Waypoints — Waypoint-package","text":"Mark Eisler","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/Waypoint-package.html","id":"maintainer","dir":"Reference","previous_headings":"","what":"Maintainer","title":"Convert, Validate, Format and Print Geographic Coordinates and Waypoints — Waypoint-package","text":"Mark Eisler <mark@markeisler.com>","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/latlon.html","id":null,"dir":"Reference","previous_headings":"","what":"Latitude or Longitude Attribute for Coords — latlon","title":"Latitude or Longitude Attribute for Coords — latlon","text":"latlon()<- adds attribute \"latlon\" objects class \"coords\", modifies existing \"latlon\" attribute.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/latlon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Latitude or Longitude Attribute for Coords — latlon","text":"","code":"latlon(cd) <- value"},{"path":"https://mark-eis.github.io/Waypoint/reference/latlon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Latitude or Longitude Attribute for Coords — latlon","text":"cd object class \"coords\". value logical vector length 1 length(cd).","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/latlon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Latitude or Longitude Attribute for Coords — latlon","text":"Argument cd returned logical vector attribute \"latlon\" updated appropriate.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/latlon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Latitude or Longitude Attribute for Coords — latlon","text":"Attribute \"latlon\" logical vector length 1 length(cd) TRUE values represent latitude FALSE values represent longitude. Setting attribute length result error. logical vector length 1L signifies values latitude TRUE, longitude FALSE. attribute used formatting printed output also validate(). Indeed, values cd revalidated every time attribute \"latlon\" added changed.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/Waypoint/reference/latlon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Latitude or Longitude Attribute for Coords — latlon","text":"","code":"## Continuing example from `coords()`... ## Create \"coords\" object in degrees and minutes  as_coords(dm, fmt = 2) #> Nelson's Column                           51°30.4659′ (N/E) #> Ostravice                                 49°32.7726′ (N/E) #> Tally Ho                                  48°06.4339′ (N/E) #> Washington Monument                       38°53.3696′ (N/E) #> Null Island                                0°00.0000′ (N/E) #> Tristan da Cunha                          37°06.7044′ (S/W) #> Mawson Peak                               53°06.2869′ (S/W) #> Silvio Pettirossi International Airport   25°14.4093′ (S/W) #> Nelson's Column                            0°07.6754′ (S/W) #> Ostravice                                 18°23.9137′ (N/E) #> Tally Ho                                 122°46.7203′ (S/W) #> Washington Monument                       77°02.1145′ (S/W) #> Null Island                                0°00.0000′ (N/E) #> Tristan da Cunha                          12°17.3178′ (S/W) #> Mawson Peak                               73°31.0370′ (N/E) #> Silvio Pettirossi International Airport   57°31.1536′ (S/W)  ## Set \"latlon\" attribute to FALSE, length 1; all values are longitude latlon(dm) <- FALSE dm #> Nelson's Column                           51°30.4659′ E #> Ostravice                                 49°32.7726′ E #> Tally Ho                                  48°06.4339′ E #> Washington Monument                       38°53.3696′ E #> Null Island                                0°00.0000′ E #> Tristan da Cunha                          37°06.7044′ W #> Mawson Peak                               53°06.2869′ W #> Silvio Pettirossi International Airport   25°14.4093′ W #> Nelson's Column                            0°07.6754′ W #> Ostravice                                 18°23.9137′ E #> Tally Ho                                 122°46.7203′ W #> Washington Monument                       77°02.1145′ W #> Null Island                                0°00.0000′ E #> Tristan da Cunha                          12°17.3178′ W #> Mawson Peak                               73°31.0370′ E #> Silvio Pettirossi International Airport   57°31.1536′ W  ## Set \"latlon\" attribute to TRUE (n=8) and FALSE (n=8) ## i.e., 8 each of latitude and longitude latlon(dm) <- rep(c(TRUE, FALSE), each = 8) dm #> Nelson's Column                           51°30.4659′ N #> Ostravice                                 49°32.7726′ N #> Tally Ho                                  48°06.4339′ N #> Washington Monument                       38°53.3696′ N #> Null Island                                0°00.0000′ N #> Tristan da Cunha                          37°06.7044′ S #> Mawson Peak                               53°06.2869′ S #> Silvio Pettirossi International Airport   25°14.4093′ S #> Nelson's Column                            0°07.6754′ W #> Ostravice                                 18°23.9137′ E #> Tally Ho                                 122°46.7203′ W #> Washington Monument                       77°02.1145′ W #> Null Island                                0°00.0000′ E #> Tristan da Cunha                          12°17.3178′ W #> Mawson Peak                               73°31.0370′ E #> Silvio Pettirossi International Airport   57°31.1536′ W  ## Reversing latitude and longitude results in an invalid latitude, ## throwing a warning latlon(dm) <- rep(c(FALSE, TRUE), each = 8) #> Warning: Validation failed! dm #> Warning: Formatting invalid coords! #> Nelson's Column                           51°30.4659′ E #> Ostravice                                 49°32.7726′ E #> Tally Ho                                  48°06.4339′ E #> Washington Monument                       38°53.3696′ E #> Null Island                                0°00.0000′ E #> Tristan da Cunha                          37°06.7044′ W #> Mawson Peak                               53°06.2869′ W #> Silvio Pettirossi International Airport   25°14.4093′ W #> Nelson's Column                            0°07.6754′ S #> Ostravice                                 18°23.9137′ N #> Tally Ho                                 122°46.7203′ S #> Washington Monument                       77°02.1145′ S #> Null Island                                0°00.0000′ N #> Tristan da Cunha                          12°17.3178′ S #> Mawson Peak                               73°31.0370′ N #> Silvio Pettirossi International Airport   57°31.1536′ S  rm(dm)"},{"path":"https://mark-eis.github.io/Waypoint/reference/op-zero-length.html","id":null,"dir":"Reference","previous_headings":"","what":"Operator Providing Alternative to Zero-Length Object — op-zero-length","title":"Operator Providing Alternative to Zero-Length Object — op-zero-length","text":"Infix function implementing provision alternative object zero length.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/op-zero-length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Operator Providing Alternative to Zero-Length Object — op-zero-length","text":"","code":"x %L% y"},{"path":"https://mark-eis.github.io/Waypoint/reference/op-zero-length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Operator Providing Alternative to Zero-Length Object — op-zero-length","text":"x, y atomic vector arguments objects length() defined.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/op-zero-length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Operator Providing Alternative to Zero-Length Object — op-zero-length","text":"x, length(x) zero, y.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/op-zero-length.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Operator Providing Alternative to Zero-Length Object — op-zero-length","text":"infix function %L% may useful implementing (length(x)) x else y inspired null coalescing operator %||%.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/Waypoint/reference/op-zero-length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Operator Providing Alternative to Zero-Length Object — op-zero-length","text":"","code":"c4 <- letters[1:4] c0 <- character(0) n3 <- 1:3 n0 <- numeric(0)  c4 %L% n3 #> [1] \"a\" \"b\" \"c\" \"d\" c0 %L% n3 #> [1] 1 2 3  n3 %L% c4 #> [1] 1 2 3 n0 %L% c4 #> [1] \"a\" \"b\" \"c\" \"d\"  rm(c4, c0, n3, n0)"},{"path":"https://mark-eis.github.io/Waypoint/reference/review.html","id":null,"dir":"Reference","previous_headings":"","what":"Review Coordinates and Waypoints Validity — review","title":"Review Coordinates and Waypoints Validity — review","text":"review() review validity elements \"coords\" \"waypoints\" objects.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/review.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Review Coordinates and Waypoints Validity — review","text":"","code":"review(x, ...)  # S3 method for class 'coords' review(x, ..., show_n = 20L)  # S3 method for class 'waypoints' review(x, ..., show_n = 20L)"},{"path":"https://mark-eis.github.io/Waypoint/reference/review.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Review Coordinates and Waypoints Validity — review","text":"x object class \"coords\" \"waypoints\". ... arguments passed methods. show_n integer, maximum number invalid elements argument x include output; default 20L.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/review.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Review Coordinates and Waypoints Validity — review","text":"review() method class \"coords\" returns list comprising following elements: - allvalid logical, whether elements argument x valid. n_invalid integer, number invalid elements argument x, . invalids numeric vector including invalid elements argument x, . which_invalid integer vector specifying elements argument x \t invalid, . method class \"waypoints\" returns list two sub-lists, sub-list elements described method class \"coords\", one latitude longitude.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/review.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Review Coordinates and Waypoints Validity — review","text":"review() reveals elements \"coords\"  \"waypoints\" objects conform criteria checked validate(), .e. valid geographic locations.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/Waypoint/reference/review.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Review Coordinates and Waypoints Validity — review","text":"","code":"## Continuing example from `validate()`, named numeric vector representing degrees and minutes, ## the erroneous first value having more than 60 minutes  ## Create \"coords\" object of degrees and minutes as_coords(dm, fmt = 2) #> Nelson's Column                           51°60.4659′ (N/E) #> Ostravice                                 49°32.7726′ (N/E) #> Tally Ho                                  48°06.4339′ (N/E) #> Washington Monument                       38°53.3696′ (N/E) #> Null Island                                0°00.0000′ (N/E) #> Tristan da Cunha                          37°06.7044′ (S/W) #> Mawson Peak                               53°06.2869′ (S/W) #> Silvio Pettirossi International Airport   25°14.4093′ (S/W) #> Nelson's Column                            0°07.6754′ (S/W) #> Ostravice                                 18°23.9137′ (N/E) #> Tally Ho                                 122°46.7203′ (S/W) #> Washington Monument                       77°02.1145′ (S/W) #> Null Island                                0°00.0000′ (N/E) #> Tristan da Cunha                          12°17.3178′ (S/W) #> Mawson Peak                               73°31.0370′ (N/E) #> Silvio Pettirossi International Airport   57°31.1536′ (S/W)  review(dm) #> $allvalid #> [1] FALSE #>  #> $n_invalid #> [1] 1 #>  #> $invalids #> Nelson's Column   51°60.4659′ (N/E) #>  #> $which_invalid #> [1] 1 #>   ### ## Continuing example from `validate()`, data frame representing waypoint names and latitude ## and longitude values in decimal degrees, the erroneous penultimate latitude having more than ## 90 degrees absolute value  ## Create \"waypoints\" object of decimal degrees (fmt = 1) as_waypoints(wp1, fmt = 1) #>                                             Latitude     Longitude  #>                                           ___________  ____________ #> Nelson's Column                            51.507765°    -0.127924° #> Ostravice                                  49.546210°    18.398562° #> Tally Ho                                   48.107232°  -122.778671° #> Washington Monument                        38.889494°   -77.035242° #> Null Island                                 0.000000°     0.000000° #> Tristan da Cunha                          -37.111740°   -12.288630° #> Mawson Peak                               -93.104781°    73.517283° #> Silvio Pettirossi International Airport   -25.240156°   -57.519227°  review(wp1) #> $Lat #> $Lat$allvalid #> [1] FALSE #>  #> $Lat$n_invalid #> [1] 1 #>  #> $Lat$invalids #>  -93.104781° lat #>  #> $Lat$which_invalid #> [1] 7 #>  #>  #> $Lon #> $Lon$allvalid #> [1] TRUE #>  #> $Lon$n_invalid #> [1] 0 #>  #> $Lon$invalids #> [1] NA #>  #> $Lon$which_invalid #> [1] NA #>  #>   rm(dm, wp1)"},{"path":"https://mark-eis.github.io/Waypoint/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Coords or Waypoints — validate","title":"Validate Coords or Waypoints — validate","text":"validate() validates objects class \"coords\" \"waypoints\".","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Coords or Waypoints — validate","text":"","code":"# S3 method for class 'coords' validate(x, ...)  # S3 method for class 'waypoints' validate(x, ...)"},{"path":"https://mark-eis.github.io/Waypoint/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Coords or Waypoints — validate","text":"x object class \"coords\" \"waypoints\". ... arguments passed methods.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Coords or Waypoints — validate","text":"validate() returns argument logical vector attribute \"valid\", attributes \"validlat\" \"validlon\" updated appropriate \"coords\" ' \"waypoints\" objects respectively.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/validate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Coords or Waypoints — validate","text":"Individual coordinate values within \"coords\" \"waypoints\" objects checked ensure represent valid geographic locations. valid, absolute values coordinates degrees must exceed 180, 90 degrees latitude , similarly, absolute values minutes seconds components, given, must exceed 60 degrees. Otherwise warning issued \"valid\" attribute case \"coords\" object, \"validlat\" \"validlon\" attributes case \"waypoints\" object set FALSE non-compliant coordinate values.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/Waypoint/reference/validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Coords or Waypoints — validate","text":"","code":"## Continuing example from `coords()`... ## Create \"coords\" object in degrees and minutes  validate(dm) #> Nelson's Column                           51°30.4659′ (N/E) #> Ostravice                                 49°32.7726′ (N/E) #> Tally Ho                                  48°06.4339′ (N/E) #> Washington Monument                       38°53.3696′ (N/E) #> Null Island                                0°00.0000′ (N/E) #> Tristan da Cunha                          37°06.7044′ (S/W) #> Mawson Peak                               53°06.2869′ (S/W) #> Silvio Pettirossi International Airport   25°14.4093′ (S/W) #> Nelson's Column                            0°07.6754′ (S/W) #> Ostravice                                 18°23.9137′ (N/E) #> Tally Ho                                 122°46.7203′ (S/W) #> Washington Monument                       77°02.1145′ (S/W) #> Null Island                                0°00.0000′ (N/E) #> Tristan da Cunha                          12°17.3178′ (S/W) #> Mawson Peak                               73°31.0370′ (N/E) #> Silvio Pettirossi International Airport   57°31.1536′ (S/W)  ## Change first value to have more than 60 minutes dm[1] <- 5160.4659  validate(dm) #> Warning: Validation failed! #> Warning: Formatting invalid coords! #> Nelson's Column                           51°60.4659′ (N/E) #> Ostravice                                 49°32.7726′ (N/E) #> Tally Ho                                  48°06.4339′ (N/E) #> Washington Monument                       38°53.3696′ (N/E) #> Null Island                                0°00.0000′ (N/E) #> Tristan da Cunha                          37°06.7044′ (S/W) #> Mawson Peak                               53°06.2869′ (S/W) #> Silvio Pettirossi International Airport   25°14.4093′ (S/W) #> Nelson's Column                            0°07.6754′ (S/W) #> Ostravice                                 18°23.9137′ (N/E) #> Tally Ho                                 122°46.7203′ (S/W) #> Washington Monument                       77°02.1145′ (S/W) #> Null Island                                0°00.0000′ (N/E) #> Tristan da Cunha                          12°17.3178′ (S/W) #> Mawson Peak                               73°31.0370′ (N/E) #> Silvio Pettirossi International Airport   57°31.1536′ (S/W)  ## Examine \"valid\" attribute of dm attr(dm, \"valid\") #>  [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [13]  TRUE  TRUE  TRUE  TRUE  ### ## Continuing example from `waypoints()`... ## Create \"waypoints\" object in decimal degrees  validate(wp1) #>                                             Latitude     Longitude  #>                                           ___________  ____________ #> Nelson's Column                            51.507765°    -0.127924° #> Ostravice                                  49.546210°    18.398562° #> Tally Ho                                   48.107232°  -122.778671° #> Washington Monument                        38.889494°   -77.035242° #> Null Island                                 0.000000°     0.000000° #> Tristan da Cunha                          -37.111740°   -12.288630° #> Mawson Peak                               -53.104781°    73.517283° #> Silvio Pettirossi International Airport   -25.240156°   -57.519227°  ## Change penultimate latitude absolute value to have more than 90 degrees wp1$lat[7] <- -93.104781  validate(wp1) #> Warning: Validation of latitude failed! #> Warning: Invalid latitude! #>                                             Latitude     Longitude  #>                                           ___________  ____________ #> Nelson's Column                            51.507765°    -0.127924° #> Ostravice                                  49.546210°    18.398562° #> Tally Ho                                   48.107232°  -122.778671° #> Washington Monument                        38.889494°   -77.035242° #> Null Island                                 0.000000°     0.000000° #> Tristan da Cunha                          -37.111740°   -12.288630° #> Mawson Peak                               -93.104781°    73.517283° #> Silvio Pettirossi International Airport   -25.240156°   -57.519227°  ## Examine \"validlat\" attribute of wp1 attr(wp1, \"validlat\") #> [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  rm(dm, wp1)"},{"path":"https://mark-eis.github.io/Waypoint/reference/waypoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographic or GPS Waypoint Class — Waypoints","title":"Geographic or GPS Waypoint Class — Waypoints","text":"as_waypoints() creates object class \"waypoints\", robust representation series geographic GPS waypoints paired latitude longitude values. convert() converts format existing objects class \"waypoints\" () decimal degrees, (ii) degrees minutes, (iii) degrees, minutes seconds.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/waypoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographic or GPS Waypoint Class — Waypoints","text":"","code":"as_waypoints(object, ...)  # S3 method for class 'waypoints' print(x, ...)  # Default S3 method as_waypoints(object, ..., fmt = 1L)  # S3 method for class 'waypoints' convert(x, fmt, ...)  # S3 method for class 'waypoints' format(x, ..., usenames = TRUE)"},{"path":"https://mark-eis.github.io/Waypoint/reference/waypoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geographic or GPS Waypoint Class — Waypoints","text":"object data frame row representing waypoint, comprising least two numeric columns containing values latitude longitude, optionally character column waypoint names (see Details). ... arguments passed methods. x object class \"waypoints\" created function as_waypoints(). fmt integer value 1L, 2L 3L, indicating current desired coordinate format (see Details). usenames logical, whether include waypoint names formatted output.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/waypoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geographic or GPS Waypoint Class — Waypoints","text":"object classes \"waypoints\" \"data.frame\", comprising original data frame argument df, latitude longitude values possibly converted appropriate additional attributes: – \"fmt\" coordinate format. \"namescol\" position waypoint names, present within df. \"llcols\" position latitude longitude columns within df. \"validlat\" \"validlon\" logical vectors indicating whether   individual latitude longitude values valid geographic locations.","code":""},{"path":"https://mark-eis.github.io/Waypoint/reference/waypoints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geographic or GPS Waypoint Class — Waypoints","text":"default, names waypoints included \"Name\" column data frame argument df, latitude longitude two columns immediately right hand side \"Name\". alternative column waypoint names may specified setting integer attribute, \"namescol\" indicating position df, setting attribute NA supresses printing waypoint names. df neither \"Name\" column \"namescol\" attribute, \"row.names\" attribute used waypoint names present df. Similarly, alternative columns latitude longitude may specified setting \"llcols\" length 2 integer vector attribute indicating positions df. Individual values provided numeric vector latitude longitude columns data frame argument df decimal point number whole degrees case decimal degrees, number whole minutes case degrees minutes, number whole seconds case degrees, minutes seconds. fmt argument 1L represent decimal degrees, 2L degrees minutes, 3L degrees, minutes seconds used provide format values data frame argument df converted \"waypoints\" object desired format \"waypoints\" object converted new format. Note conversion \"waypoints\" object, original data frame argument df modified latitude longitude values described previous paragraph, may inspected using standard R code, see examples. latitude longitude values newly created \"waypoints\" object checked ensure valid geographic locations described validate(). Likewise, check made ensure existing \"waypoints\" object converted new format already validated; , re-validated.","code":""},{"path":[]},{"path":"https://mark-eis.github.io/Waypoint/reference/waypoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geographic or GPS Waypoint Class — Waypoints","text":"","code":"## Dataframe representing waypoint names, and latitude and longitude values ## of degrees, minutes and seconds wp1 <- data.frame(     name = c(\"Nelson's Column\", \"Ostravice\", \"Tally Ho\", \"Washington Monument\", \"Null Island\",              \"Tristan da Cunha\", \"Mawson Peak\", \"Silvio Pettirossi International Airport\"),     lat = c(513027.95, 493246.36, 480626.04, 385322.18, 0, -370642.26, -530617.21, -251424.56),     lon = c(-00740.53, 182354.82, -1224643.22, -770206.87, 0, -121719.07, 733102.22, -573109.21) )  ## Create \"waypoints\" object of degrees, minutes and seconds (fmt = 3) as_waypoints(wp1, fmt = 3) #>                                                Latitude        Longitude  #>                                           ______________  _______________ #> Nelson's Column                           51°30′27.95″ N    0°07′40.53″ W #> Ostravice                                 49°32′46.36″ N   18°23′54.82″ E #> Tally Ho                                  48°06′26.04″ N  122°46′43.22″ W #> Washington Monument                       38°53′22.18″ N   77°02′06.87″ W #> Null Island                                0°00′00.00″ N    0°00′00.00″ E #> Tristan da Cunha                          37°06′42.26″ S   12°17′19.07″ W #> Mawson Peak                               53°06′17.21″ S   73°31′02.22″ E #> Silvio Pettirossi International Airport   25°14′24.56″ S   57°31′09.21″ W  ## Convert to degrees and minutes (fmt = 2) convert(wp1, 2) #>                                               Latitude       Longitude  #>                                           _____________  ______________ #> Nelson's Column                           51°30.4658′ N    0°07.6755′ W #> Ostravice                                 49°32.7727′ N   18°23.9137′ E #> Tally Ho                                  48°06.4340′ N  122°46.7203′ W #> Washington Monument                       38°53.3697′ N   77°02.1145′ W #> Null Island                                0°00.0000′ N    0°00.0000′ E #> Tristan da Cunha                          37°06.7043′ S   12°17.3178′ W #> Mawson Peak                               53°06.2868′ S   73°31.0370′ E #> Silvio Pettirossi International Airport   25°14.4093′ S   57°31.1535′ W  ## Convert to decimal degrees (fmt = 1) convert(wp1, 1) #>                                             Latitude     Longitude  #>                                           ___________  ____________ #> Nelson's Column                            51.507764°    -0.127925° #> Ostravice                                  49.546211°    18.398561° #> Tally Ho                                   48.107233°  -122.778672° #> Washington Monument                        38.889494°   -77.035242° #> Null Island                                 0.000000°     0.000000° #> Tristan da Cunha                          -37.111739°   -12.288631° #> Mawson Peak                               -53.104781°    73.517283° #> Silvio Pettirossi International Airport   -25.240156°   -57.519225°  ### ## Dataframe representing unnamed latitude and longitude ## values in decimal degrees wp2 <- data.frame(     lat = c(51.507765, 49.54621, 48.107232, 38.889494, 0, -37.11174, -53.104781, -25.240156),     lon = c(-0.127924, 18.398562, -122.778671, -77.035242, 0, -12.28863, 73.517283, -57.519227) )  ## Create \"waypoints\" object of decimal degrees (default fmt = 1) as_waypoints(wp2, fmt = 1) #>       Latitude     Longitude  #>     ___________  ____________ #> 1    51.507765°    -0.127924° #> 2    49.546210°    18.398562° #> 3    48.107232°  -122.778671° #> 4    38.889494°   -77.035242° #> 5     0.000000°     0.000000° #> 6   -37.111740°   -12.288630° #> 7   -53.104781°    73.517283° #> 8   -25.240156°   -57.519227°  ## Add row.names row.names(wp2) <-     c(\"Nelson's Column\", \"Ostravice\", \"Tally Ho\", \"Washington Monument\", \"Null Island\",       \"Tristan da Cunha\", \"Mawson Peak\", \"Silvio Pettirossi International Airport\") wp2 #>                                             Latitude     Longitude  #>                                           ___________  ____________ #> Nelson's Column                            51.507765°    -0.127924° #> Ostravice                                  49.546210°    18.398562° #> Tally Ho                                   48.107232°  -122.778671° #> Washington Monument                        38.889494°   -77.035242° #> Null Island                                 0.000000°     0.000000° #> Tristan da Cunha                          -37.111740°   -12.288630° #> Mawson Peak                               -53.104781°    73.517283° #> Silvio Pettirossi International Airport   -25.240156°   -57.519227°  ## Convert to degrees and minutes (fmt = 2) convert(wp2, 2) #>                                               Latitude       Longitude  #>                                           _____________  ______________ #> Nelson's Column                           51°30.4659′ N    0°07.6754′ W #> Ostravice                                 49°32.7726′ N   18°23.9137′ E #> Tally Ho                                  48°06.4339′ N  122°46.7203′ W #> Washington Monument                       38°53.3696′ N   77°02.1145′ W #> Null Island                                0°00.0000′ N    0°00.0000′ E #> Tristan da Cunha                          37°06.7044′ S   12°17.3178′ W #> Mawson Peak                               53°06.2869′ S   73°31.0370′ E #> Silvio Pettirossi International Airport   25°14.4094′ S   57°31.1536′ W  ## Convert to degrees, minutes and seconds (fmt = 3) convert(wp2, 3) #>                                                Latitude        Longitude  #>                                           ______________  _______________ #> Nelson's Column                           51°30′27.95″ N    0°07′40.53″ W #> Ostravice                                 49°32′46.36″ N   18°23′54.82″ E #> Tally Ho                                  48°06′26.04″ N  122°46′43.22″ W #> Washington Monument                       38°53′22.18″ N   77°02′06.87″ W #> Null Island                                0°00′00.00″ N    0°00′00.00″ E #> Tristan da Cunha                          37°06′42.26″ S   12°17′19.07″ W #> Mawson Peak                               53°06′17.21″ S   73°31′02.22″ E #> Silvio Pettirossi International Airport   25°14′24.56″ S   57°31′09.22″ W  ## Degrees, minutes and seconds values as an ordinary R data frame as.data.frame(wp2) #>                                               lat           lon #> Nelson's Column                          513028.0     -740.5264 #> Ostravice                                493246.4   182354.8232 #> Tally Ho                                 480626.0 -1224643.2156 #> Washington Monument                      385322.2  -770206.8712 #> Null Island                                   0.0        0.0000 #> Tristan da Cunha                        -370642.3  -121719.0680 #> Mawson Peak                             -530617.2   733102.2188 #> Silvio Pettirossi International Airport -251424.6  -573109.2172  ## Convert to decimal degrees, then format as a ## fixed-width character vector without names... convert(wp2, 3) |> format(usenames = FALSE) #> [1] \" 51°30′27.95″ N    0°07′40.53″ W\" \" 49°32′46.36″ N   18°23′54.82″ E\" #> [3] \" 48°06′26.04″ N  122°46′43.22″ W\" \" 38°53′22.18″ N   77°02′06.87″ W\" #> [5] \"  0°00′00.00″ N    0°00′00.00″ E\" \" 37°06′42.26″ S   12°17′19.07″ W\" #> [7] \" 53°06′17.21″ S   73°31′02.22″ E\" \" 25°14′24.56″ S   57°31′09.22″ W\"  ## ...or with them format(wp2) #> [1] \"Nelson's Column                           51°30′27.95″ N    0°07′40.53″ W\" #> [2] \"Ostravice                                 49°32′46.36″ N   18°23′54.82″ E\" #> [3] \"Tally Ho                                  48°06′26.04″ N  122°46′43.22″ W\" #> [4] \"Washington Monument                       38°53′22.18″ N   77°02′06.87″ W\" #> [5] \"Null Island                                0°00′00.00″ N    0°00′00.00″ E\" #> [6] \"Tristan da Cunha                          37°06′42.26″ S   12°17′19.07″ W\" #> [7] \"Mawson Peak                               53°06′17.21″ S   73°31′02.22″ E\" #> [8] \"Silvio Pettirossi International Airport   25°14′24.56″ S   57°31′09.22″ W\"  rm(wp1, wp2)"}]
